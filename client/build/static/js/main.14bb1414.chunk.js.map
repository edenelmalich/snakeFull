{"version":3,"sources":["components/GameArea.js","components/Snake.js","components/Food.js","components/Obstacles.js","components/Poison.js","actions/gameAction.js","actions/typeAction.js","components/GameNav.js","components/MainPage.js","components/FinishGame.js","reducers/gameReducer.js","reducers/index.js","store.js","App.js","index.js","img/SnakeLogo.png","img/apple.png","img/poison.png"],"names":["move","moveEnemy","Snake","props","snake","bg","map","dot","i","style","left","top","background","className","key","Food","food","src","apple","alt","Obstacles","obstacle","Poison","poison","poisonApple","setScore","score","dispatch","type","payload","setEnemyScore","setStop","stopState","emitSnakeAte","debounce","socket","emit","emitSnakeAtePoison","initialState","speed","direction","enemyDirection","snakeDots","snake2Dots","obstacle1","spinner","player1","player2","finishGame","GameArea","state","onKeyDown","e","keyCode","setState","playerName","moveSnake","dots","head","length","push","shift","moveEnemySnake","checkIfEat","getScore","enlargeSnake","increaseSpeed","checkIfEatPoison","SnakePoison","checkIfOutOfBorders","headEnemy","GameOver","checkIfTouch","forEach","cord","checkIfDraw","setDraw","checkIfCollapsed","pop","checkIfEnemyCollapsed","console","log","isPlayerSnake","newSnake","unshift","decreaseSpeed","clearInterval","setInterval","this","on","receivedPayload","snakeEnemyDots","getEnemyScore","document","onkeydown","to","player","Component","connect","gameReducer","getStopState","drawState","GameNav","Navbar","variant","Brand","href","setPlayer2Name","setPlayerName","useState","getName","setName","setSpinner","enterGame","setEnterGame","checkReady","setReady","readyState","SnakeLogo","onSubmit","preventDefault","id","player2Name","placeholder","onChange","target","value","required","Spinner","animation","FinishGame","getDrawState","setFinish","onClick","propType","PropTypes","number","isRequired","bool","func","string","action","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","socketIOClient","App","path","render","exact","component","ReactDOM","getElementById","module","exports"],"mappings":"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","file":"static/js/main.14bb1414.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport Snake from './Snake';\r\nimport Food from './Food';\r\nimport Obstacles from './Obstacles';\r\nimport Poison from './Poison';\r\n// Css import\r\nimport '../css/Game.css';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport {\r\n  setScore,\r\n  setEnemyScore,\r\n  setStop,\r\n  setDraw\r\n} from '../actions/gameAction';\r\n//  lodash imports\r\nimport { debounce } from 'lodash';\r\n// react router dom import for redirect to pages\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst emitSnakeAte = debounce(socket => {\r\n  socket.emit('snakeAte', {});\r\n}, 250);\r\nconst emitSnakeAtePoison = debounce(socket => {\r\n  socket.emit('snakeAtePoison', {});\r\n}, 250);\r\nlet move;\r\nlet moveEnemy;\r\n// Default state for the game\r\nconst initialState = {\r\n  food: [30, 30],\r\n  poison: [80, 80],\r\n  speed: 100,\r\n  direction: 'RIGHT',\r\n  enemyDirection: 'RIGHT',\r\n  snakeDots: [\r\n    [0, 0],\r\n    [2, 0]\r\n  ],\r\n  snake2Dots: [\r\n    [0, 40],\r\n    [2, 40]\r\n  ],\r\n  obstacle: [8, 10, 12, 14, 16],\r\n  obstacle1: [60, 62, 64, 66, 68],\r\n  spinner: false,\r\n  player1: '',\r\n  player2: '',\r\n  finishGame: false\r\n};\r\n\r\nclass GameArea extends Component {\r\n  state = initialState;\r\n\r\n  componentDidMount() {\r\n    move = setInterval(this.moveSnake, this.state.speed);\r\n    moveEnemy = setInterval(this.moveEnemySnake, this.state.speed);\r\n    // get the direction from the server after the user click and set the state\r\n    this.props.socket.on('enemyChangedDirection', receivedPayload => {\r\n      this.setState({ enemyDirection: receivedPayload.direction });\r\n    });\r\n\r\n    this.props.socket.on('newEnemySnake', receivedPayload => {\r\n      this.setState({ snake2Dots: receivedPayload.snakeEnemyDots });\r\n    });\r\n    // get the apple cord from the server\r\n    this.props.socket.on('newAppleCord', receivedPayload => {\r\n      this.setState({ food: receivedPayload.food });\r\n    });\r\n    this.props.socket.on('enemyAte', () => {\r\n      this.props.setEnemyScore(this.props.getEnemyScore + 1);\r\n      const isPlayerSnake = false;\r\n      this.enlargeSnake(isPlayerSnake);\r\n    });\r\n    // get the poison cord from the server\r\n    this.props.socket.on('newApplePoisonCord', receivedPayload => {\r\n      this.setState({ poison: receivedPayload.poison });\r\n    });\r\n    this.props.socket.on('enemyAtePoison', () => {\r\n      if (this.props.getEnemyScore > 0) {\r\n        this.props.setEnemyScore(this.props.getEnemyScore - 1);\r\n      }\r\n      const isPlayerSnake = false;\r\n      this.enlargeSnake(isPlayerSnake);\r\n    });\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.snakeDots.length === 0 || this.state.snake2Dots === 0) {\r\n      this.GameOver();\r\n    } else {\r\n      this.checkIfOutOfBorders();\r\n      this.checkIfCollapsed();\r\n      this.checkIfEnemyCollapsed();\r\n      this.checkIfEat();\r\n      this.checkIfTouch();\r\n      this.checkIfEatPoison();\r\n      this.checkIfDraw();\r\n    }\r\n  }\r\n  onKeyDown = e => {\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({ direction: 'UP' });\r\n        this.props.socket.emit('directionChange', {\r\n          playerName: this.state.player2,\r\n          direction: 'UP'\r\n        });\r\n        break;\r\n      case 40:\r\n        this.setState({ direction: 'DOWN' });\r\n        this.props.socket.emit('directionChange', {\r\n          playerName: this.state.player2,\r\n          direction: 'DOWN'\r\n        });\r\n        break;\r\n      case 37:\r\n        this.setState({ direction: 'LEFT' });\r\n        this.props.socket.emit('directionChange', {\r\n          playerName: this.state.player2,\r\n          direction: 'LEFT'\r\n        });\r\n        break;\r\n      case 39:\r\n        this.setState({ direction: 'RIGHT' });\r\n        this.props.socket.emit('directionChange', {\r\n          playerName: this.state.player2,\r\n          direction: 'RIGHT'\r\n        });\r\n        break;\r\n    }\r\n  };\r\n  // function that directs the snake where to move\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots\r\n    });\r\n  };\r\n  moveEnemySnake = () => {\r\n    let dots = [...this.state.snake2Dots];\r\n    let head = dots[dots.length - 1];\r\n    switch (this.state.enemyDirection) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snake2Dots: dots\r\n    });\r\n  };\r\n  // function that check if the snake has ate red apple\r\n  checkIfEat = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({ food: [-50, -50] });\r\n      emitSnakeAte(this.props.socket);\r\n      this.props.setScore(this.props.getScore + 1);\r\n      this.enlargeSnake('snake');\r\n      this.increaseSpeed();\r\n    }\r\n  };\r\n  // function that check if the snake has ate poison\r\n  checkIfEatPoison = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let poison = this.state.poison;\r\n    if (head[0] === poison[0] && head[1] === poison[1]) {\r\n      this.setState({ poison: [-50, -50] });\r\n      emitSnakeAtePoison(this.props.socket);\r\n      if (this.props.getScore > 0) {\r\n        this.props.setScore(this.props.getScore - 1);\r\n      }\r\n      this.SnakePoison('snake');\r\n      this.increaseSpeed();\r\n    }\r\n  };\r\n  // function that check if the snakes had touched on borders\r\n  checkIfOutOfBorders = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    if (\r\n      head[0] >= 100 ||\r\n      head[1] >= 100 ||\r\n      headEnemy[0] >= 100 ||\r\n      headEnemy[1] >= 100 ||\r\n      head[0] < 0 ||\r\n      head[1] < 0 ||\r\n      headEnemy[0] < 0 ||\r\n      headEnemy[1] < 0\r\n    ) {\r\n      this.GameOver();\r\n    }\r\n  };\r\n  //  function that checks if the snake has touched on obstacle\r\n  checkIfTouch = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    this.state.obstacle.forEach(cord => {\r\n      if (\r\n        (head[0] === 80 && head[1] === cord) ||\r\n        (headEnemy[0] === 80 && headEnemy[1] === cord)\r\n      ) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n    this.state.obstacle1.forEach(cord => {\r\n      if (\r\n        (head[0] === 50 && head[1] === cord) ||\r\n        (headEnemy[0] === 50 && headEnemy[1] === cord)\r\n      ) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n  };\r\n  //  function that checks for draw\r\n  checkIfDraw = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    if (head[0] === headEnemy[0] && head[1] === headEnemy[1]) {\r\n      this.props.setDraw(true);\r\n      this.GameOver();\r\n    }\r\n  };\r\n  //  function that checks if the snake has touched itself\r\n  checkIfCollapsed = () => {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach(dot => {\r\n      if (head[0] === dot[0] && head[1] === dot[1]) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n  };\r\n  checkIfEnemyCollapsed = () => {\r\n    let snake = [...this.state.snake2Dots];\r\n    console.log(snake);\r\n    let headEnemy = snake[snake.length - 1];\r\n    snake.pop();\r\n    console.log(snake);\r\n    snake.forEach(dot => {\r\n      if (headEnemy[0] === dot[0] && headEnemy[1] === dot[1]) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n  };\r\n  // function that make the snake bigger if he ate red apple\r\n  enlargeSnake = isPlayerSnake => {\r\n    let newSnake;\r\n    if (isPlayerSnake) {\r\n      newSnake = [...this.state.snakeDots];\r\n      newSnake.unshift([]);\r\n      this.setState({\r\n        snakeDots: newSnake\r\n      });\r\n    } else {\r\n      newSnake = [...this.state.snake2Dots];\r\n      newSnake.unshift([]);\r\n      this.setState({\r\n        snake2Dots: newSnake\r\n      });\r\n    }\r\n  };\r\n  // function that make the snake smaller if he ate poison\r\n  SnakePoison = isPlayerSnake => {\r\n    let newSnake;\r\n    if (isPlayerSnake) {\r\n      newSnake = [...this.state.snakeDots];\r\n      newSnake.shift();\r\n      this.setState({\r\n        snakeDots: newSnake\r\n      });\r\n    } else {\r\n      newSnake = [...this.state.snake2Dots];\r\n      newSnake.shift();\r\n      this.setState({\r\n        snake2Dots: newSnake\r\n      });\r\n    }\r\n  };\r\n  // function for increase speed if snake ate red apple\r\n  increaseSpeed = () => {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10\r\n      });\r\n    }\r\n  };\r\n  // function for decrease speed if snake ate poison\r\n  decreaseSpeed = () => {\r\n    this.setState({\r\n      speed: this.state.speed + 10\r\n    });\r\n  };\r\n  GameOver = () => {\r\n    clearInterval(move);\r\n    clearInterval(moveEnemy);\r\n    this.setState({\r\n      finishGame: true\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.finishGame) {\r\n      return <Redirect to='/FinishGame' />;\r\n    }\r\n    return (\r\n      <div className='game-container'>\r\n        <span className='Score'>\r\n          {this.props.player} Your Score is: {this.props.getScore}\r\n        </span>\r\n        <span className='ScorePlayer2'>\r\n          {this.props.player2} Your Score is: {this.props.getEnemyScore}\r\n        </span>\r\n        <div className='game-area'>\r\n          <Snake snake={this.state.snakeDots} bg={'#00e676'} />\r\n          <Snake snake={this.state.snake2Dots} bg={'blue'} />\r\n          <Food food={this.state.food} />\r\n          <Poison poison={this.state.poison} />\r\n          <Obstacles obstacle={this.state.obstacle} top={80} />\r\n          <Obstacles obstacle={this.state.obstacle1} top={50} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// PropTypes\r\nGameArea.propTypes = {\r\n  setStop: PropTypes.func.isRequired,\r\n  setScore: PropTypes.func.isRequired,\r\n  getScore: PropTypes.number.isRequired,\r\n  getEnemyScore: PropTypes.number.isRequired,\r\n  setEnemyScore: PropTypes.func.isRequired,\r\n  setDraw: PropTypes.func.isRequired,\r\n  getStopState: PropTypes.bool.isRequired\r\n};\r\n// Redux state Reducer\r\nconst mapStateToProps = state => ({\r\n  getScore: state.gameReducer.getScore,\r\n  getEnemyScore: state.gameReducer.getEnemyScore,\r\n  player: state.gameReducer.player,\r\n  player2: state.gameReducer.player2,\r\n  getStopState: state.gameReducer.getStopState\r\n});\r\nexport default connect(mapStateToProps, {\r\n  setScore,\r\n  setEnemyScore,\r\n  setStop,\r\n  setDraw\r\n})(GameArea);\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Snake = props => {\r\n  const { snake, bg } = props;\r\n  return (\r\n    <Fragment>\r\n      {snake.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`,\r\n          background: bg\r\n        };\r\n        return <div className='Snake-cord ' key={i} style={style}></div>;\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Snake;\r\n","import React from 'react';\r\nimport apple from '../img/apple.png';\r\n\r\nconst Food = props => {\r\n  const { food } = props;\r\n  const style = {\r\n    left: `${food[0]}%`,\r\n    top: `${food[1]}%`\r\n  };\r\n  return <img src={apple} className='Food' style={style} alt='food' />;\r\n};\r\nexport default Food;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Obstacles = props => {\r\n  const { obstacle, top } = props;\r\n  return (\r\n    <Fragment>\r\n      {obstacle.map((dot, i) => {\r\n        const style = {\r\n          left: `${top}%`,\r\n          top: `${dot}%`\r\n        };\r\n        return <div className='Obstacle-cord' key={i} style={style}></div>;\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Obstacles;\r\n","import React from 'react';\r\nimport poisonApple from '../img/poison.png';\r\n\r\nconst Poison = props => {\r\n  const { poison } = props;\r\n  const style = {\r\n    left: `${poison[0]}%`,\r\n    top: `${poison[1]}%`\r\n  };\r\n  return (\r\n    <img src={poisonApple} className='Poison' style={style} alt='poison' />\r\n  );\r\n};\r\nexport default Poison;\r\n","import {\r\n  SET_SCORE,\r\n  SET_ENEMY_SCORE,\r\n  SET_PLAYER2_NAME,\r\n  SET_PLAYER_NAME,\r\n  SET_STOP_GAME,\r\n  SET_DRAW\r\n} from './typeAction';\r\n\r\nexport const setScore = score => dispatch => {\r\n  dispatch({\r\n    type: SET_SCORE,\r\n    payload: score\r\n  });\r\n};\r\nexport const setEnemyScore = score => dispatch => {\r\n  dispatch({\r\n    type: SET_ENEMY_SCORE,\r\n    payload: score\r\n  });\r\n};\r\n\r\nexport const setPlayerName = player => dispatch => {\r\n  dispatch({\r\n    type: SET_PLAYER_NAME,\r\n    payload: player\r\n  });\r\n};\r\nexport const setPlayer2Name = player2 => dispatch => {\r\n  dispatch({\r\n    type: SET_PLAYER2_NAME,\r\n    payload: player2\r\n  });\r\n};\r\nexport const setStop = stopState => dispatch => {\r\n  dispatch({\r\n    type: SET_STOP_GAME,\r\n    payload: stopState\r\n  });\r\n};\r\nexport const setDraw = drawState => dispatch => {\r\n  dispatch({\r\n    type: SET_DRAW,\r\n    payload: drawState\r\n  });\r\n};\r\n","// set the score\r\nexport const SET_SCORE = 'SET_SCORE';\r\nexport const SET_ENEMY_SCORE = 'SET_ENEMY_SCORE';\r\n// set players names\r\nexport const SET_PLAYER2_NAME = 'SET_PLAYER2_NAME';\r\nexport const SET_PLAYER_NAME = 'SET_PLAYER_NAME';\r\n// set Stop game\r\nexport const SET_STOP_GAME = 'SET_STOP_GAME';\r\n// set draw\r\nexport const SET_DRAW = 'SET_DRAW';\r\n","import React, { Fragment } from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nconst GameNav = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar bg='dark' variant='dark'>\r\n        <Navbar.Brand href='#home'>Snake Game</Navbar.Brand>\r\n      </Navbar>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default GameNav;\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// snake main logo\r\nimport SnakeLogo from '../img/SnakeLogo.png';\r\n// css import\r\nimport '../css/Game.css';\r\n// react router dom import for redirect to pages\r\nimport { Redirect } from 'react-router-dom';\r\n// Bootstrap import\r\nimport { Spinner } from 'react-bootstrap';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { setPlayer2Name, setPlayerName } from '../actions/gameAction';\r\n\r\nconst MainPage = ({ socket, setPlayer2Name, setPlayerName }) => {\r\n  // useState\r\n  const [getName, setName] = useState('');\r\n  const [spinner, setSpinner] = useState(false);\r\n  const [enterGame, setEnterGame] = useState(false);\r\n  const [checkReady, setReady] = useState(false);\r\n\r\n  //   function\r\n  const onChange = e => {\r\n    setName(e.target.value);\r\n  };\r\n  //\r\n  // A function that sends to server the details of the entered player\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    setPlayerName(getName);\r\n    socket.emit('playerDetails', socket.id, getName);\r\n    socket.on('startGame', player2Name => {\r\n      setPlayer2Name(player2Name);\r\n      setEnterGame(true);\r\n    });\r\n    // A condition that checks if there are 2 connected users\r\n    if (!enterGame) {\r\n      setSpinner(true);\r\n    }\r\n  };\r\n  // Each logged-in user waits for an answer if the other user is ready to play\r\n  socket.on('ready', readyState => {\r\n    if (readyState) {\r\n      setReady(true);\r\n    }\r\n  });\r\n  // If all the players are ready, move to the game page\r\n  if (enterGame && checkReady) {\r\n    return <Redirect to='/GameArea' />;\r\n  }\r\n  return (\r\n    <div className='main'>\r\n      <header className='header'>Snake Game</header>\r\n      <img src={SnakeLogo} alt='snake logo' />\r\n      <form className='MainForm' onSubmit={e => onSubmit(e)}>\r\n        <input\r\n          type='text'\r\n          placeholder='Please enter your name'\r\n          onChange={e => onChange(e)}\r\n          value={getName}\r\n          required\r\n        />\r\n        <input type='submit' value='Play' />\r\n        {spinner ? (\r\n          <span>\r\n            <div className='Spinner-text'>Please wait for more player</div>\r\n            <Spinner animation='border' variant='dark' />\r\n          </span>\r\n        ) : null}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n// PropTypes\r\nMainPage.propTypes = {\r\n  setPlayer2Name: PropTypes.func.isRequired,\r\n  setPlayerName: PropTypes.func.isRequired,\r\n  getStopState: PropTypes.bool.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  getStopState: state.gameReducer.getStopState\r\n});\r\nexport default connect(mapStateToProps, {\r\n  setPlayer2Name,\r\n  setPlayerName\r\n})(MainPage);\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Snake Logo\r\nimport SnakeLogo from '../img/SnakeLogo.png';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { setStop, setScore, setEnemyScore } from '../actions/gameAction';\r\n// react router dom import for redirect to pages\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst FinishGame = ({\r\n  getScore,\r\n  getDrawState,\r\n  getEnemyScore,\r\n  player,\r\n  setScore,\r\n  setEnemyScore\r\n}) => {\r\n  const [finishGame, setFinish] = useState(false);\r\n  if (finishGame) {\r\n    setScore(0);\r\n    setEnemyScore(0);\r\n    return <Redirect to='/' />;\r\n  }\r\n  return (\r\n    <div>\r\n      <header className='finish-header'>Game over</header>\r\n      <img id='FinishLogo' src={SnakeLogo} alt='snake logo' />\r\n      {!getDrawState ? (\r\n        <div>\r\n          {getScore > getEnemyScore ? (\r\n            <div className='finish-text'>\r\n              {player} You Win. Your score is: {getScore}\r\n            </div>\r\n          ) : null}\r\n          {getScore < getEnemyScore ? (\r\n            <div className='finish-text'>\r\n              {player} You Lose. Your score is: {getScore}\r\n            </div>\r\n          ) : null}\r\n\r\n          {getScore === getEnemyScore ? (\r\n            <div className='finish-text'>Draw</div>\r\n          ) : null}\r\n        </div>\r\n      ) : (\r\n        <div className='finish-text'>Draw</div>\r\n      )}\r\n      <button className='finish-btn' onClick={() => setFinish(true)}>\r\n        Finish game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n// PropTypes\r\nFinishGame.propType = {\r\n  getScore: PropTypes.number.isRequired,\r\n  getEnemyScore: PropTypes.number.isRequired,\r\n  getDrawState: PropTypes.bool.isRequired,\r\n  setStop: PropTypes.func.isRequired,\r\n  player: PropTypes.string.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  getScore: state.gameReducer.getScore,\r\n  getEnemyScore: state.gameReducer.getEnemyScore,\r\n  getDrawState: state.gameReducer.getDrawState,\r\n  player: state.gameReducer.player\r\n});\r\nexport default connect(mapStateToProps, { setStop, setScore, setEnemyScore })(\r\n  FinishGame\r\n);\r\n","import {\r\n  SET_SCORE,\r\n  SET_ENEMY_SCORE,\r\n  SET_PLAYER2_NAME,\r\n  SET_PLAYER_NAME,\r\n  SET_STOP_GAME,\r\n  SET_DRAW\r\n} from '../actions/typeAction';\r\n\r\nconst initialState = {\r\n  getScore: 0,\r\n  getEnemyScore: 0,\r\n  player: '',\r\n  player2: '',\r\n  getStopState: false,\r\n  getDrawState: false\r\n};\r\nconst gameReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_SCORE:\r\n      return { ...state, getScore: payload };\r\n    case SET_ENEMY_SCORE:\r\n      return { ...state, getEnemyScore: payload };\r\n    case SET_PLAYER2_NAME:\r\n      return { ...state, player2: payload };\r\n    case SET_PLAYER_NAME:\r\n      return { ...state, player: payload };\r\n    case SET_STOP_GAME:\r\n      return { ...state, getStopState: payload };\r\n    case SET_DRAW:\r\n      return { ...state, getDrawState: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default gameReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport gameReducer from './gameReducer';\r\n\r\nexport default combineReducers({\r\n  gameReducer\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\n// Components\nimport GameArea from './components/GameArea';\nimport GameNav from './components/GameNav';\nimport MainPage from './components/MainPage';\nimport FinishGame from './components/FinishGame';\n// React router dom\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport socketIOClient from 'socket.io-client';\nconst socket = socketIOClient.connect('http://localhost:4000');\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className='App'>\n            <GameNav />\n            <Switch>\n              <Route\n                path='/'\n                render={props => <MainPage socket={socket} {...props} />}\n                exact\n              />\n              <Route\n                path='/GameArea'\n                render={props => <GameArea socket={socket} {...props} />}\n              />\n              <Route path='/FinishGame' component={FinishGame} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/SnakeLogo.f2ce4eac.png\";","module.exports = __webpack_public_path__ + \"static/media/apple.30832537.png\";","module.exports = __webpack_public_path__ + \"static/media/poison.6d0adcb4.png\";"],"sourceRoot":""}
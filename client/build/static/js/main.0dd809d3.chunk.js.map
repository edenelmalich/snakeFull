{"version":3,"sources":["components/Snake.js","components/Food.js","components/Obstacles.js","components/Poison.js","actions/modalAction.js","actions/typeAction.js","components/ModalGame.js","components/GameArea.js","actions/gameAction.js","components/GameNav.js","components/MainPage.js","reducers/modalReducer.js","reducers/gameReducer.js","reducers/index.js","store.js","App.js","index.js","img/apple.png","img/poison.png","img/SnakeLogo.png"],"names":["Snake","props","snake","bg","map","dot","i","style","left","top","background","className","key","Food","food","src","apple","alt","Obstacles","obstacle","Poison","poison","poisonApple","setModal","modal","dispatch","type","payload","ModalGame","getModalState","getScore","getModalText","useState","exit","setExit","to","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","onClick","variant","propType","PropTypes","bool","isRequired","func","number","connect","state","modalReducer","gameReducer","setModalText","getRandomCord","Math","floor","random","initialState","speed","direction","enemyDirection","snakeDots","snake2Dots","obstacle1","spinner","socket","socketIOClient","GameArea","onKeyDown","e","playerName","location","keyCode","setState","emit","moveSnake","dots","head","length","push","shift","moveEnemySnake","checkIfEat","headEnemy","setScore","enlargeSnake","increaseSpeed","setEnemyScore","getEnemyScore","checkIfEatPoison","prop","SnakePoison","decreaseSpeed","checkIfOutOfBorders","GameOver","checkIfTouch","forEach","cord","checkIfDraw","checkIfCollapsed","pop","snakeType","newSnake","newEnemySnake","unshift","setInterval","this","on","receivedPayload","document","onkeydown","onGameOver","getName","Component","score","modalState","GameNav","Navbar","Brand","href","getClientsCounter","setClientsCounter","stateSuccess","setName","setPlayerName","setSpinner","data","playerA","name","success","pathname","SnakeLogo","onSubmit","preventDefault","socketID","id","placeholder","onChange","target","value","required","Spinner","animation","action","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","path","component","MainPage","exact","ReactDOM","render","getElementById","module","exports"],"mappings":"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","file":"static/js/main.0dd809d3.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Snake = props => {\r\n  const { snake, bg } = props;\r\n  return (\r\n    <Fragment>\r\n      {snake.map((dot, i) => {\r\n        const style = {\r\n          left: `${dot[0]}%`,\r\n          top: `${dot[1]}%`,\r\n          background: bg\r\n        };\r\n        return <div className='Snake-cord ' key={i} style={style}></div>;\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Snake;\r\n","import React from 'react';\r\nimport apple from '../img/apple.png';\r\n\r\nconst Food = props => {\r\n  const { food } = props;\r\n  const style = {\r\n    left: `${food[0]}%`,\r\n    top: `${food[1]}%`\r\n  };\r\n  return <img src={apple} className='Food' style={style} alt='food' />;\r\n};\r\nexport default Food;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Obstacles = props => {\r\n  const { obstacle, top } = props;\r\n  return (\r\n    <Fragment>\r\n      {obstacle.map((dot, i) => {\r\n        const style = {\r\n          left: `${top}%`,\r\n          top: `${dot}%`\r\n        };\r\n        return <div className='Obstacle-cord' key={i} style={style}></div>;\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\nexport default Obstacles;\r\n","import React from 'react';\r\nimport poisonApple from '../img/poison.png';\r\n\r\nconst Poison = props => {\r\n  const { poison } = props;\r\n  const style = {\r\n    left: `${poison[0]}%`,\r\n    top: `${poison[1]}%`\r\n  };\r\n  return (\r\n    <img src={poisonApple} className='Poison' style={style} alt='poison' />\r\n  );\r\n};\r\nexport default Poison;\r\n","import { SET_MODAL, SET_MODAL_TEXT } from './typeAction';\r\nexport const setModal = modal => dispatch => {\r\n  dispatch({\r\n    type: SET_MODAL,\r\n    payload: modal\r\n  });\r\n};\r\nexport const setModalText = modalState => dispatch => {\r\n  dispatch({\r\n    type: SET_MODAL_TEXT,\r\n    payload: modalState\r\n  });\r\n};\r\n","export const SET_MODAL = 'SET_MODAL';\r\nexport const SET_MODAL_TEXT = 'SET_MODAL_TEXT';\r\nexport const SET_SCORE = 'SET_SCORE';\r\nexport const SET_ENEMY_SCORE = 'SET_ENEMY_SCORE';\r\nexport const SET_CLIENTS_COUNTER = 'GET_CLIENT_COUNTER';\r\n","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Bootstrap imports\r\nimport { Modal, Button } from 'react-bootstrap';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { setModal, setModalText } from '../actions/modalAction';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nconst ModalGame = ({ getModalState, setModal, getScore, getModalText }) => {\r\n  const [exit, setExit] = useState(false);\r\n  if (exit) {\r\n    setModal(getModalState);\r\n    return <Redirect to='/' />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <Modal show={getModalState} onHide={() => setModal(getModalState)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Game over</Modal.Title>\r\n        </Modal.Header>\r\n        {getModalText ? (\r\n          <Fragment>\r\n            <Modal.Body>Game Over. Your score is: {getScore} </Modal.Body>\r\n          </Fragment>\r\n        ) : (\r\n          <Fragment>Draw</Fragment>\r\n        )}\r\n        <Modal.Footer>\r\n          <Button onClick={() => setExit(true)} variant='secondary'>\r\n            Exit\r\n          </Button>\r\n          <Button onClick={() => setModal(getModalState)} variant='primary'>\r\n            Play again\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\nModalGame.propType = {\r\n  getModalState: PropTypes.bool.isRequired,\r\n  setModal: PropTypes.func.isRequired,\r\n  getScore: PropTypes.number.isRequired,\r\n  getModalText: PropTypes.bool.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  getModalState: state.modalReducer.getModalState,\r\n  getScore: state.gameReducer.getScore,\r\n  setModalText: state.modalReducer.setModalText\r\n});\r\nexport default connect(mapStateToProps, { setModal })(ModalGame);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n// Components\r\nimport Snake from './Snake';\r\nimport Food from './Food';\r\nimport Obstacles from './Obstacles';\r\nimport Poison from './Poison';\r\nimport ModalGame from './ModalGame';\r\n// Socket import\r\nimport socketIOClient from 'socket.io-client';\r\n// Css import\r\nimport '../css/Game.css';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { setModal, setModalText } from '../actions/modalAction';\r\nimport { setScore, setEnemyScore } from '../actions/gameAction';\r\n\r\n// Function to get random cord\r\nconst getRandomCord = () => {\r\n  let min = 1;\r\n  let max = 97;\r\n  let x = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  let y = Math.floor((Math.random() * (max - min + 1) + min) / 2) * 2;\r\n  return [x, y];\r\n};\r\n// Default state for the game\r\nconst initialState = {\r\n  food: getRandomCord(),\r\n  poison: getRandomCord(),\r\n  speed: 100,\r\n  direction: 'RIGHT',\r\n  enemyDirection: 'RIGHT',\r\n  snakeDots: [\r\n    [0, 0],\r\n    [2, 0]\r\n  ],\r\n  snake2Dots: [\r\n    [0, 40],\r\n    [2, 40]\r\n  ],\r\n  obstacle: [8, 10, 12, 14, 16],\r\n  obstacle1: [60, 62, 64, 66, 68],\r\n  spinner: false\r\n};\r\n\r\n// socket = io.connect( 'http://127.0.0.1:3000', {\r\n//     reconnection: true,\r\n//     reconnectionDelay: 1000,\r\n//     reconnectionDelayMax : 5000,\r\n//     reconnectionAttempts: 99999\r\n// } );\r\n\r\n// socket.on('initialState', receivedInitialState => {\r\n//   initialState = receivedInitialState;\r\n// });\r\n\r\nconst socket = socketIOClient.connect('http://localhost:4000');\r\n\r\n// socket.on('enemyChangedDirection', receivedPayload => {\r\n//   this.setState({ enemyDirection: receivedPayload.direction });\r\n// });\r\n\r\nclass GameArea extends Component {\r\n  state = initialState;\r\n  // ComponentWillMount\r\n  componentWillMount() {}\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    setInterval(this.moveEnemySnake, this.state.speed);\r\n    socket.on('enemyChangedDirection', receivedPayload => {\r\n      this.setState({ enemyDirection: receivedPayload.direction });\r\n    });\r\n    document.onkeydown = this.onKeyDown;\r\n  }\r\n  componentDidUpdate() {\r\n    if (this.state.snakeDots.length === 0) {\r\n      this.onGameOver();\r\n    } else {\r\n      this.checkIfOutOfBorders();\r\n      this.checkIfCollapsed();\r\n      this.checkIfEat();\r\n      this.checkIfTouch();\r\n      this.checkIfEatPoison();\r\n      this.checkIfDraw();\r\n    }\r\n  }\r\n\r\n  onKeyDown = e => {\r\n    const playerName = this.props.location.state.playerName;\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({ direction: 'UP' });\r\n        socket.emit('directionChange', { playerName, direction: 'UP' });\r\n        break;\r\n      case 40:\r\n        this.setState({ direction: 'DOWN' });\r\n        socket.emit('directionChange', { playerName, direction: 'DOWN' });\r\n        break;\r\n      case 37:\r\n        this.setState({ direction: 'LEFT' });\r\n        socket.emit('directionChange', { playerName, direction: 'LEFT' });\r\n        break;\r\n      case 39:\r\n        this.setState({ direction: 'RIGHT' });\r\n        socket.emit('directionChange', { playerName, direction: 'RIGHT' });\r\n        break;\r\n    }\r\n  };\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.direction) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots\r\n    });\r\n  };\r\n  moveEnemySnake = () => {\r\n    let dots = [...this.state.snake2Dots];\r\n    let head = dots[dots.length - 1];\r\n\r\n    switch (this.state.enemyDirection) {\r\n      case 'RIGHT':\r\n        head = [head[0] + 2, head[1]];\r\n        break;\r\n      case 'LEFT':\r\n        head = [head[0] - 2, head[1]];\r\n        break;\r\n      case 'DOWN':\r\n        head = [head[0], head[1] + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [head[0], head[1] - 2];\r\n        break;\r\n    }\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snake2Dots: dots\r\n    });\r\n  };\r\n  checkIfEat = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    let food = this.state.food;\r\n    if (head[0] === food[0] && head[1] === food[1]) {\r\n      this.setState({\r\n        food: getRandomCord()\r\n      });\r\n      this.props.setScore(this.props.getScore + 1);\r\n      this.enlargeSnake('snake');\r\n      this.increaseSpeed();\r\n    }\r\n    if (headEnemy[0] === food[0] && headEnemy[1] === food[1]) {\r\n      this.setState({\r\n        food: getRandomCord()\r\n      });\r\n      this.props.setEnemyScore(this.props.getEnemyScore + 1);\r\n      this.enlargeSnake('snakeEnemy');\r\n      this.increaseSpeed();\r\n    }\r\n  };\r\n  checkIfEatPoison = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    let poison = this.state.poison;\r\n    if (head[0] === poison[0] && head[1] === poison[1]) {\r\n      this.setState({\r\n        poison: getRandomCord()\r\n      });\r\n      if (this.props.getScore > 0) {\r\n        this.prop.setScore(this.props.getScore - 1);\r\n      }\r\n      this.SnakePoison('snake');\r\n      this.decreaseSpeed();\r\n    }\r\n    if (headEnemy[0] === poison[0] && headEnemy[1] === poison[1]) {\r\n      this.setState({\r\n        poison: getRandomCord()\r\n      });\r\n      if (this.props.getEnemyScore > 0) {\r\n        this.prop.setEnemyScore(this.props.getEnemyScore - 1);\r\n      }\r\n      this.SnakePoison('snakeEnemy');\r\n      this.decreaseSpeed();\r\n    }\r\n  };\r\n  checkIfOutOfBorders = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    if (\r\n      head[0] >= 100 ||\r\n      headEnemy[0] >= 100 ||\r\n      headEnemy[1] >= 100 ||\r\n      head[1] >= 100 ||\r\n      head[0] < 0 ||\r\n      headEnemy[0] < 0 ||\r\n      headEnemy[1] < 0 ||\r\n      head[1] < 0\r\n    ) {\r\n      this.GameOver();\r\n    }\r\n  };\r\n  checkIfTouch = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    this.state.obstacle.forEach(cord => {\r\n      if (\r\n        (head[0] === 80 && head[1] === cord) ||\r\n        (headEnemy[0] === 80 && headEnemy[1] === cord)\r\n      ) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n    this.state.obstacle1.forEach(cord => {\r\n      if (\r\n        (head[0] === 50 && head[1] === cord) ||\r\n        (headEnemy[0] === 50 && headEnemy[1] === cord)\r\n      ) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n  };\r\n  checkIfDraw = () => {\r\n    let head = this.state.snakeDots[this.state.snakeDots.length - 1];\r\n    let headEnemy = this.state.snake2Dots[this.state.snake2Dots.length - 1];\r\n    if (head[0] === headEnemy[0] && head[1] === headEnemy[1]) {\r\n      this.prop.setModalText(this.props.getModalText);\r\n      this.GameOver();\r\n    }\r\n  };\r\n  checkIfCollapsed = () => {\r\n    let snake = [...this.state.snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    snake.pop();\r\n    snake.forEach(dot => {\r\n      if (head[0] === dot[0] && head[1] === dot[1]) {\r\n        this.GameOver();\r\n      }\r\n    });\r\n  };\r\n\r\n  enlargeSnake = snakeType => {\r\n    let newSnake = [...this.state.snakeDots];\r\n    let newEnemySnake = [...this.state.snake2Dots];\r\n    if (snakeType === 'snake') {\r\n      newSnake.unshift([]);\r\n      this.setState({\r\n        snakeDots: newSnake\r\n      });\r\n    } else {\r\n      newEnemySnake.unshift([]);\r\n      this.setState({\r\n        snake2Dots: newEnemySnake\r\n      });\r\n    }\r\n  };\r\n\r\n  SnakePoison = snakeType => {\r\n    let newSnake = [...this.state.snakeDots];\r\n    let newEnemySnake = [...this.state.snake2Dots];\r\n    if (snakeType === 'snake') {\r\n      newSnake.shift([]);\r\n      this.setState({\r\n        snakeDots: newSnake\r\n      });\r\n    } else {\r\n      newEnemySnake.shift([]);\r\n      this.setState({\r\n        snake2Dots: newEnemySnake\r\n      });\r\n    }\r\n  };\r\n\r\n  increaseSpeed = () => {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed - 10\r\n      });\r\n    }\r\n  };\r\n  decreaseSpeed = () => {\r\n    this.setState({\r\n      speed: this.state.speed + 10\r\n    });\r\n  };\r\n\r\n  GameOver = () => {\r\n    this.props.setModal(this.props.getModalState);\r\n    this.setState(initialState);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className='game-container'>\r\n        <span className='Score'>\r\n          {this.props.location.state.playerName} Your Score is:{' '}\r\n          {this.props.getScore}\r\n        </span>\r\n        <span className='ScorePlayer2'>\r\n          {this.props.location.state.getName} Your Score is:{' '}\r\n          {this.props.getEnemyScore}\r\n        </span>\r\n        {/* {this.props.getModalState ? <ModalGame /> : null} */}\r\n        <div className='game-area'>\r\n          <Snake snake={this.state.snakeDots} bg={'#00e676'} />\r\n          <Snake snake={this.state.snake2Dots} bg={'blue'} />\r\n          <Food food={this.state.food} />\r\n          <Poison poison={this.state.poison} />\r\n          <Obstacles obstacle={this.state.obstacle} top={80} />\r\n          <Obstacles obstacle={this.state.obstacle1} top={50} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nGameArea.propTypes = {\r\n  getModalState: PropTypes.bool.isRequired,\r\n  setModal: PropTypes.func.isRequired,\r\n  setScore: PropTypes.func.isRequired,\r\n  getScore: PropTypes.number.isRequired,\r\n  getEnemyScore: PropTypes.number.isRequired,\r\n  setModalText: PropTypes.func.isRequired,\r\n  getModalText: PropTypes.bool.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  getModalState: state.modalReducer.getModalState,\r\n  getScore: state.gameReducer.getScore,\r\n  getEnemyScore: state.gameReducer.getEnemyScore,\r\n  getModalText: state.modalReducer.getModalText\r\n});\r\nexport default connect(mapStateToProps, {\r\n  setModal,\r\n  setScore,\r\n  setEnemyScore,\r\n  setModalText\r\n})(GameArea);\r\n","import { SET_SCORE, SET_CLIENTS_COUNTER, SET_ENEMY_SCORE } from './typeAction';\r\n\r\nexport const setScore = score => dispatch => {\r\n  dispatch({\r\n    type: SET_SCORE,\r\n    payload: score\r\n  });\r\n};\r\nexport const setEnemyScore = score => dispatch => {\r\n  dispatch({\r\n    type: SET_ENEMY_SCORE,\r\n    payload: score\r\n  });\r\n};\r\nexport const setClientsCounter = stateSuccess => dispatch => {\r\n  dispatch({\r\n    type: SET_CLIENTS_COUNTER,\r\n    payload: stateSuccess\r\n  });\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nconst GameNav = () => {\r\n  return (\r\n    <Fragment>\r\n      <Navbar bg='dark' variant='dark'>\r\n        <Navbar.Brand href='#home'>Snake Game</Navbar.Brand>\r\n      </Navbar>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default GameNav;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SnakeLogo from '../img/SnakeLogo.png';\r\nimport '../css/Game.css';\r\nimport { Redirect } from 'react-router-dom';\r\n// Bootstrap import\r\nimport { Spinner } from 'react-bootstrap';\r\n// Socket import\r\nimport socketIOClient from 'socket.io-client';\r\n// Redux\r\nimport { connect } from 'react-redux';\r\nimport { setClientsCounter } from '../actions/gameAction';\r\n\r\nconst socket = socketIOClient.connect('http://localhost:4000');\r\nconst MainPage = ({ getClientsCounter, setClientsCounter }) => {\r\n  // useState\r\n  const [getName, setName] = useState('');\r\n  const [playerName, setPlayerName] = useState('');\r\n  const [spinner, setSpinner] = useState(false);\r\n\r\n  //   function\r\n  const onChange = e => {\r\n    setName(e.target.value);\r\n  };\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    socket.emit('playerID', { socketID: socket.id, name: getName });\r\n\r\n    if (!getClientsCounter) {\r\n      setSpinner(true);\r\n    }\r\n  };\r\n  socket.on('getPlayersName', data => {\r\n    setPlayerName(data.playerA.name);\r\n  });\r\n  socket.on('success', success => {\r\n    setClientsCounter(success);\r\n  });\r\n\r\n  if (getClientsCounter) {\r\n    return (\r\n      <Redirect\r\n        to={{\r\n          pathname: '/GameArea',\r\n          state: { getName: getName, playerName: playerName }\r\n        }}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div className='main'>\r\n      <header className='header'>Snake Game</header>\r\n      <img src={SnakeLogo} alt='snake logo' />\r\n      <form className='MainForm' onSubmit={e => onSubmit(e)}>\r\n        <input\r\n          type='text'\r\n          placeholder='Please enter your name'\r\n          onChange={e => onChange(e)}\r\n          value={getName}\r\n          required\r\n        />\r\n        <input type='submit' value='Play' />\r\n        {spinner ? (\r\n          <span>\r\n            <div className='Spinner-text'>Please wait for more player</div>\r\n            <Spinner animation='border' variant='dark' />\r\n          </span>\r\n        ) : null}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nMainPage.propTypes = {\r\n  getClientsCounter: PropTypes.bool.isRequired,\r\n  setClientsCounter: PropTypes.func.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  getClientsCounter: state.gameReducer.getClientsCounter\r\n});\r\nexport default connect(mapStateToProps, { setClientsCounter })(MainPage);\r\n","import { SET_MODAL, SET_MODAL_TEXT } from '../actions/typeAction';\r\n\r\nconst initialState = {\r\n  getModalState: false,\r\n  getModalText: false\r\n};\r\nconst modalReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_MODAL:\r\n      return { ...state, getModalState: !payload };\r\n    case SET_MODAL_TEXT:\r\n      return { ...state, getModalText: !payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default modalReducer;\r\n","import {\r\n  SET_SCORE,\r\n  SET_CLIENTS_COUNTER,\r\n  SET_ENEMY_SCORE\r\n} from '../actions/typeAction';\r\n\r\nconst initialState = {\r\n  getScore: 0,\r\n  getEnemyScore: 0,\r\n  getClientsCounter: false\r\n};\r\nconst gameReducer = (state = initialState, action) => {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case SET_SCORE:\r\n      return { ...state, getScore: payload };\r\n    case SET_ENEMY_SCORE:\r\n      return { ...state, getEnemyScore: payload };\r\n    case SET_CLIENTS_COUNTER:\r\n      return { ...state, getClientsCounter: payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default gameReducer;\r\n","import { combineReducers } from 'redux';\r\nimport modalReducer from './modalReducer';\r\nimport gameReducer from './gameReducer';\r\n\r\nexport default combineReducers({\r\n  modalReducer,\r\n  gameReducer\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React, { Component } from 'react';\n// Components\nimport GameArea from './components/GameArea';\nimport GameNav from './components/GameNav';\nimport MainPage from './components/MainPage';\n// React router dom\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <BrowserRouter>\n          <div className='App'>\n            <GameNav />\n            <Switch>\n              <Route path='/' component={MainPage} exact />\n              <Route path='/GameArea' component={GameArea} />\n            </Switch>\n          </div>\n        </BrowserRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","module.exports = __webpack_public_path__ + \"static/media/apple.30832537.png\";","module.exports = __webpack_public_path__ + \"static/media/poison.6d0adcb4.png\";","module.exports = __webpack_public_path__ + \"static/media/SnakeLogo.f2ce4eac.png\";"],"sourceRoot":""}